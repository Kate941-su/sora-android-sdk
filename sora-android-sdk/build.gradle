apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'de.undercouch.download'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

group = 'com.github.shiguredo'

android {
    publishNonDefault true
    compileSdkVersion 23
    buildToolsVersion "26.0.1"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
    buildTypes {
        debug {
            debuggable true
        }
        release {
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
    }
}

dependencies {
    compile files('libs/libwebrtc-classes.jar')

    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // required by "signaling" part
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.squareup.okhttp3:okhttp:3.7.0'

    // required by "rtc" part
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxkotlin:2.1.0'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

// ==== libwebrtc AAR dependency resolution ====

def aarZipURL = "https://github.com/shiguredo/sora-webrtc-android/releases/download/" +
    "${libwebrtc_version}/libwebrtc.aar.zip"
def aarTmpDir = ".libwebrtc.tmp"
def aarName = "${aarTmpDir}/libwebrtc.aar"
def aarZipName = "${aarName}.zip"
def aarVersion = "${aarName}.version"

task cleanAar(type: Delete) {
    description 'Clean AAR related files including tmp directory'
    delete aarTmpDir, "src/main/jniLibs", "libs/libwebrtc-classes.jar"
}

def needsDownload(aarVersion) {
    if( !file(aarVersion).exists() ) {
        logger.info("No libwebrtc.aar exists, it will be downloaded")
        return true
    }

    return false
}

task downloadAar() {
    description 'Download libwebrtc AAR file if it does NOT exists'

    doLast {
        if( needsDownload(aarVersion) ) {
            def versionFile = file(aarVersion)
            if( versionFile.exists() ) {
                def currentVersion = file(aarVersion).text
                if( currentVersion != "$libwebrtc_version" ) {
                    // ダウンロード済みバージョンと設定が異なる場合、
                    // ビルドをエラーで終わらせて、手動クリーンさせる
                    def message = "libwebrtc.aar version differ. " +
                        "If your setting is correct, please run cleanAar first."
                    logger.error(message)
                    throw new GradleException(message)
                }
            }

            download {
                src aarZipURL
                dest aarZipName
            }
            def file = file("${aarVersion}")
            file.createNewFile()
            file.text = "$libwebrtc_version"
        }
    }
}

if( needsDownload(aarVersion) ) {
    // TODO: AAR ダウンロードするときには cleanAar を実行する。
    // if で囲まず、downloadAar.onlyIf { needsDownload(aarVersion) } とすると
    // downloadAar がスキップされて cleanAar が実行されることがある。
    // depends まで含めた onlyIf があれば dependsOn は静的にしたい。
    downloadAar.dependsOn cleanAar
}

task installAar (dependsOn: downloadAar) {
    description 'Unpack and place jni files and jar to proper places'

    doLast{
        copy {
            from zipTree(aarZipName)
            into file(aarTmpDir)
        }
        copy {
            from zipTree(aarName)
            into file(aarTmpDir)
        }
        copy {
            from "${aarTmpDir}/jni"
            into 'src/main/jniLibs'
        }
        copy {
            from "${aarTmpDir}/classes.jar"
            into 'libs'
            rename { filename -> "libwebrtc-${filename}" }
        }
    }
}

preBuild.dependsOn installAar

task aarState {
    description 'Show entries of libwebrtc AAR releated directory'

    doLast {
        [aarTmpDir, "src/main/jniLibs", "libs"].each { dir ->
            println ""
            def exists = file(dir).exists()
            println "${dir}/ : exists = ${exists}"
            if (exists) {
                FileTree tree = fileTree(dir: dir)
                tree.visit {element ->
                    println "    ${element.relativePath}"
                }
            }
        }
    }
}
